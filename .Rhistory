}
curr1 <- c("Knockout", "Wild type", "Cohoused", "Isolated")
simple1 <- c("ko", "wt", "cohoused", "isolated")
partitioned.physeq <- NULL
for(i in c(1:length(names(neutral.otus.list)))){
name <- names(neutral.otus.list)[i]
name <- mgsub(curr1, simple1, name)
name.split <- strsplit(name, "-", fixed=TRUE)
if (grepl("byTank-T", partitioned_physeq_file)) {
subset.physeq <- subset_samples(gut.d75.physeq,
dpf==name.split[[1]][1] &
host.gt==name.split[[1]][2] &
housing==name.split[[1]][3] &
tank==name.split[[1]][4])
} else if (grepl("byTank-F", partitioned_physeq_file)) {
subset.physeq <- subset_samples(gut.d75.physeq,
dpf==name.split[[1]][1] &
host.gt==name.split[[1]][2] &
housing==name.split[[1]][3])
}
sub.smpl.df <- as.data.frame(sample_data(subset.physeq))
sub.otu.df <- as.data.frame(otu_table(subset.physeq))
# Over represented partition
overRep.smpl.df <- sub.smpl.df
overRep.smpl.df <- cbind(overRep.smpl.df,
"partition"=rep("overRep",
length(overRep.smpl.df$dpf)))
overRep.otu.tbl <- sub.otu.df
row.names(overRep.smpl.df) <- paste(row.names(overRep.smpl.df), "-overRep", sep="")
row.names(overRep.otu.tbl) <- paste(row.names(overRep.otu.tbl), "-overRep", sep="")
zeroed.otus <- names(sub.otu.df)[!(names(sub.otu.df) %in% overRep.otus.list[[i]])]
overRep.otu.tbl[, zeroed.otus] <- 0
for.physeq <- phyloseq(sample_data(overRep.smpl.df),
otu_table(overRep.otu.tbl, taxa_are_rows=FALSE),
tax_table(subset.physeq),
phy_tree(subset.physeq))
partitioned.physeq <- merge_phyloseq(partitioned.physeq, for.physeq)
# Under represented partition
underRep.smpl.df <- sub.smpl.df
underRep.smpl.df <- cbind(underRep.smpl.df,
"partition"=rep("underRep",
length(underRep.smpl.df$dpf)))
underRep.otu.tbl <- sub.otu.df
row.names(underRep.smpl.df) <- paste(row.names(underRep.smpl.df), "-underRep", sep="")
row.names(underRep.otu.tbl) <- paste(row.names(underRep.otu.tbl), "-underRep", sep="")
zeroed.otus <- names(sub.otu.df)[!(names(sub.otu.df) %in% underRep.otus.list[[i]])]
underRep.otu.tbl[, zeroed.otus] <- 0
agn.physeq <- phyloseq(sample_data(underRep.smpl.df),
otu_table(underRep.otu.tbl, taxa_are_rows=FALSE),
tax_table(subset.physeq),
phy_tree(subset.physeq))
partitioned.physeq <- merge_phyloseq(partitioned.physeq, agn.physeq)
# NEUTRAL partition
neutral.smpl.df <- sub.smpl.df
neutral.smpl.df <- cbind(neutral.smpl.df,
"partition"=rep("neutral",
length(neutral.smpl.df$dpf)))
neutral.otu.tbl <- sub.otu.df
row.names(neutral.smpl.df) <- paste(row.names(neutral.smpl.df), "-neutral", sep="")
row.names(neutral.otu.tbl) <- paste(row.names(neutral.otu.tbl), "-neutral", sep="")
zeroed.otus <- names(sub.otu.df)[!(names(sub.otu.df) %in% neutral.otus.list[[i]])]
neutral.otu.tbl[, zeroed.otus] <- 0
neu.physeq <- phyloseq(sample_data(neutral.smpl.df),
otu_table(neutral.otu.tbl, taxa_are_rows=FALSE),
tax_table(subset.physeq),
phy_tree(subset.physeq))
partitioned.physeq <- merge_phyloseq(partitioned.physeq, neu.physeq)
}
partitioned.physeq <- prune_samples(sample_sums(partitioned.physeq) > 0, partitioned.physeq)
save(partitioned.physeq, file=partitioned_physeq_file)
source("Support_scripts/neutral_theory_data.R")
load(save_gut_rarCts_file, verbose=TRUE)
gut.d75.physeq <- subset_samples(gut.physeq, dpf=="75")
gut.d75.physeq <- prune_taxa(taxa_sums(gut.d75.physeq) > 0, gut.d75.physeq)
if(grepl("byTank-T", partitioned_physeq_file)) {
neutral.theory.data <- neutral_theory_data(physeq.object=gut.d75.physeq,
by.tank=TRUE,
source.pool=TRUE)
prop.part.eval <- TRUE
} else if (grepl("byTank-F", partitioned_physeq_file)) {
neutral.theory.data <- neutral_theory_data(physeq.object=gut.d75.physeq,
by.tank=FALSE,
source.pool=TRUE)
prop.part.eval <- FALSE
}
all.neutral.theory <- neutral.theory.data$all
nonNeutral.otus <- as.character(unique(neutral.theory.data$nonNeutral$otu))
neutral.otus <- as.character(unique(neutral.theory.data$neutral$otu))
neutral.otus.data <- neutral.theory.data$neutral
nonNeutral.otus.data <- neutral.theory.data$nonNeutral
treatments <- levels(neutral.otus.data$name)
neutral.otus.list <- list()
for(treatment in treatments) {
sub.data <- subset(neutral.otus.data, name == treatment)
sub.list <- list(as.character(sub.data$otu))
names(sub.list) <- treatment
write.table(sub.list,
file=paste("Saved_objects/",
gsub(" ", "_",
paste(treatment,
"neutral_otu_list.txt",
sep="_")),
sep=""),
quote=FALSE,
sep="\t",
row.names=FALSE)
neutral.otus.list <- c(neutral.otus.list, sub.list)
}
underRep.otus.list <- list()
for(treatment in treatments) {
sub.data <- subset(nonNeutral.otus.data, name == treatment & selection == "Under represented")
sub.list <- list(as.character(sub.data$otu))
names(sub.list) <- treatment
write.table(sub.list,
file=paste("Saved_objects/",
gsub(" ", "_",
paste(treatment,
"selected_against_otu_list.txt",
sep="_")),
sep=""),
quote=FALSE,
sep="\t",
row.names=FALSE)
underRep.otus.list <- c(underRep.otus.list, sub.list)
}
overRep.otus.list <- list()
for(treatment in treatments) {
sub.data <- subset(nonNeutral.otus.data, name == treatment & selection == "Over represented")
sub.list <- list(as.character(sub.data$otu))
names(sub.list) <- treatment
write.table(sub.list,
file=paste("Saved_objects/",
gsub(" ", "_",
paste(treatment,
"selected_for_otu_list.txt",
sep="_")),
sep=""),
quote=FALSE,
sep="\t",
row.names=FALSE)
overRep.otus.list <- c(overRep.otus.list, sub.list)
}
curr1 <- c("Knockout", "Wild type", "Cohoused", "Isolated")
simple1 <- c("ko", "wt", "cohoused", "isolated")
partitioned.physeq <- NULL
names(neutral.otus.list)
i <- 1
name <- names(neutral.otus.list)[i]
name <- mgsub(curr1, simple1, name)
name.split <- strsplit(name, "-", fixed=TRUE)
name.split
name <- names(neutral.otus.list)[i]
name <- mgsub(curr1, simple1, name)
name.split <- strsplit(name, "-", fixed=TRUE)
if (grepl("byTank-T", partitioned_physeq_file)) {
subset.physeq <- subset_samples(gut.d75.physeq,
host.gt==name.split[[1]][1] &
housing==name.split[[1]][2] &
tank==name.split[[1]][3])
} else if (grepl("byTank-F", partitioned_physeq_file)) {
subset.physeq <- subset_samples(gut.d75.physeq,
host.gt==name.split[[1]][1] &
housing==name.split[[1]][2])
}
sub.smpl.df <- as.data.frame(sample_data(subset.physeq))
sub.otu.df <- as.data.frame(otu_table(subset.physeq))
# Over represented partition
overRep.smpl.df <- sub.smpl.df
overRep.smpl.df
overRep.smpl.df <- cbind(overRep.smpl.df,
"partition"=rep("overRep",
length(overRep.smpl.df$dpf)))
overRep.otu.tbl <- sub.otu.df
row.names(overRep.smpl.df) <- paste(row.names(overRep.smpl.df), "-overRep", sep="")
row.names(overRep.otu.tbl) <- paste(row.names(overRep.otu.tbl), "-overRep", sep="")
zeroed.otus <- names(sub.otu.df)[!(names(sub.otu.df) %in% overRep.otus.list[[i]])]
overRep.otu.tbl[, zeroed.otus] <- 0
for.physeq <- phyloseq(sample_data(overRep.smpl.df),
otu_table(overRep.otu.tbl, taxa_are_rows=FALSE),
tax_table(subset.physeq),
phy_tree(subset.physeq))
partitioned.physeq <- merge_phyloseq(partitioned.physeq, for.physeq)
partitioned.physeq
source("Support_scripts/neutral_theory_data.R")
load(save_gut_rarCts_file, verbose=TRUE)
gut.d75.physeq <- subset_samples(gut.physeq, dpf=="75")
gut.d75.physeq <- prune_taxa(taxa_sums(gut.d75.physeq) > 0, gut.d75.physeq)
if(grepl("byTank-T", partitioned_physeq_file)) {
neutral.theory.data <- neutral_theory_data(physeq.object=gut.d75.physeq,
by.tank=TRUE,
source.pool=TRUE)
prop.part.eval <- TRUE
} else if (grepl("byTank-F", partitioned_physeq_file)) {
neutral.theory.data <- neutral_theory_data(physeq.object=gut.d75.physeq,
by.tank=FALSE,
source.pool=TRUE)
prop.part.eval <- FALSE
}
all.neutral.theory <- neutral.theory.data$all
nonNeutral.otus <- as.character(unique(neutral.theory.data$nonNeutral$otu))
neutral.otus <- as.character(unique(neutral.theory.data$neutral$otu))
neutral.otus.data <- neutral.theory.data$neutral
nonNeutral.otus.data <- neutral.theory.data$nonNeutral
treatments <- levels(neutral.otus.data$name)
neutral.otus.list <- list()
for(treatment in treatments) {
sub.data <- subset(neutral.otus.data, name == treatment)
sub.list <- list(as.character(sub.data$otu))
names(sub.list) <- treatment
write.table(sub.list,
file=paste("Saved_objects/",
gsub(" ", "_",
paste(treatment,
"neutral_otu_list.txt",
sep="_")),
sep=""),
quote=FALSE,
sep="\t",
row.names=FALSE)
neutral.otus.list <- c(neutral.otus.list, sub.list)
}
underRep.otus.list <- list()
for(treatment in treatments) {
sub.data <- subset(nonNeutral.otus.data, name == treatment & selection == "Under represented")
sub.list <- list(as.character(sub.data$otu))
names(sub.list) <- treatment
write.table(sub.list,
file=paste("Saved_objects/",
gsub(" ", "_",
paste(treatment,
"selected_against_otu_list.txt",
sep="_")),
sep=""),
quote=FALSE,
sep="\t",
row.names=FALSE)
underRep.otus.list <- c(underRep.otus.list, sub.list)
}
overRep.otus.list <- list()
for(treatment in treatments) {
sub.data <- subset(nonNeutral.otus.data, name == treatment & selection == "Over represented")
sub.list <- list(as.character(sub.data$otu))
names(sub.list) <- treatment
write.table(sub.list,
file=paste("Saved_objects/",
gsub(" ", "_",
paste(treatment,
"selected_for_otu_list.txt",
sep="_")),
sep=""),
quote=FALSE,
sep="\t",
row.names=FALSE)
overRep.otus.list <- c(overRep.otus.list, sub.list)
}
curr1 <- c("Knockout", "Wild type", "Cohoused", "Isolated")
simple1 <- c("ko", "wt", "cohoused", "isolated")
partitioned.physeq <- NULL
for(i in c(1:length(names(neutral.otus.list)))){
name <- names(neutral.otus.list)[i]
name <- mgsub(curr1, simple1, name)
name.split <- strsplit(name, "-", fixed=TRUE)
if (grepl("byTank-T", partitioned_physeq_file)) {
subset.physeq <- subset_samples(gut.d75.physeq,
host.gt==name.split[[1]][1] &
housing==name.split[[1]][2] &
tank==name.split[[1]][3])
} else if (grepl("byTank-F", partitioned_physeq_file)) {
subset.physeq <- subset_samples(gut.d75.physeq,
host.gt==name.split[[1]][1] &
housing==name.split[[1]][2])
}
sub.smpl.df <- as.data.frame(sample_data(subset.physeq))
sub.otu.df <- as.data.frame(otu_table(subset.physeq))
# Over represented partition
overRep.smpl.df <- sub.smpl.df
overRep.smpl.df <- cbind(overRep.smpl.df,
"partition"=rep("overRep",
length(overRep.smpl.df$dpf)))
overRep.otu.tbl <- sub.otu.df
row.names(overRep.smpl.df) <- paste(row.names(overRep.smpl.df), "-overRep", sep="")
row.names(overRep.otu.tbl) <- paste(row.names(overRep.otu.tbl), "-overRep", sep="")
zeroed.otus <- names(sub.otu.df)[!(names(sub.otu.df) %in% overRep.otus.list[[i]])]
overRep.otu.tbl[, zeroed.otus] <- 0
for.physeq <- phyloseq(sample_data(overRep.smpl.df),
otu_table(overRep.otu.tbl, taxa_are_rows=FALSE),
tax_table(subset.physeq),
phy_tree(subset.physeq))
partitioned.physeq <- merge_phyloseq(partitioned.physeq, for.physeq)
# Under represented partition
underRep.smpl.df <- sub.smpl.df
underRep.smpl.df <- cbind(underRep.smpl.df,
"partition"=rep("underRep",
length(underRep.smpl.df$dpf)))
underRep.otu.tbl <- sub.otu.df
row.names(underRep.smpl.df) <- paste(row.names(underRep.smpl.df), "-underRep", sep="")
row.names(underRep.otu.tbl) <- paste(row.names(underRep.otu.tbl), "-underRep", sep="")
zeroed.otus <- names(sub.otu.df)[!(names(sub.otu.df) %in% underRep.otus.list[[i]])]
underRep.otu.tbl[, zeroed.otus] <- 0
agn.physeq <- phyloseq(sample_data(underRep.smpl.df),
otu_table(underRep.otu.tbl, taxa_are_rows=FALSE),
tax_table(subset.physeq),
phy_tree(subset.physeq))
partitioned.physeq <- merge_phyloseq(partitioned.physeq, agn.physeq)
# NEUTRAL partition
neutral.smpl.df <- sub.smpl.df
neutral.smpl.df <- cbind(neutral.smpl.df,
"partition"=rep("neutral",
length(neutral.smpl.df$dpf)))
neutral.otu.tbl <- sub.otu.df
row.names(neutral.smpl.df) <- paste(row.names(neutral.smpl.df), "-neutral", sep="")
row.names(neutral.otu.tbl) <- paste(row.names(neutral.otu.tbl), "-neutral", sep="")
zeroed.otus <- names(sub.otu.df)[!(names(sub.otu.df) %in% neutral.otus.list[[i]])]
neutral.otu.tbl[, zeroed.otus] <- 0
neu.physeq <- phyloseq(sample_data(neutral.smpl.df),
otu_table(neutral.otu.tbl, taxa_are_rows=FALSE),
tax_table(subset.physeq),
phy_tree(subset.physeq))
partitioned.physeq <- merge_phyloseq(partitioned.physeq, neu.physeq)
}
partitioned.physeq <- prune_samples(sample_sums(partitioned.physeq) > 0, partitioned.physeq)
save(partitioned.physeq, file=partitioned_physeq_file)
source("Support_scripts/neutral_theory_data.R")
load(save_gut_rarCts_file, verbose=TRUE)
gut.d75.physeq <- subset_samples(gut.physeq, dpf=="75")
gut.d75.physeq <- prune_taxa(taxa_sums(gut.d75.physeq) > 0, gut.d75.physeq)
if(grepl("byTank-T", partitioned_physeq_file)) {
neutral.theory.data <- neutral_theory_data(physeq.object=gut.d75.physeq,
by.tank=TRUE,
source.pool=TRUE)
prop.part.eval <- TRUE
} else if (grepl("byTank-F", partitioned_physeq_file)) {
neutral.theory.data <- neutral_theory_data(physeq.object=gut.d75.physeq,
by.tank=FALSE,
source.pool=TRUE)
prop.part.eval <- FALSE
}
all.neutral.theory <- neutral.theory.data$all
save(all.neutral.theory, file="Saved_objects/all_neutral_theory")
load("Saved_objects/all_neutral_theory", verbose=TRUE)
ord.list[[1]]
do.adns <- FALSE
load(save_nofood_varStab_file, verbose=TRUE)
gut.d75.physeq <- subset_samples(no.food.physeq, smpl.type=="gut" & dpf=="75")
gut.d75.physeq <- prune_taxa(taxa_sums(gut.d75.physeq) > 0, gut.d75.physeq)
ord.list <- list()
for (i in c(1:nrow(dist.methods))) {
dist.method <- as.character(dist.methods$method[i])
dist.binary <- dist.methods$binary[i]
dist.name <- as.character(dist.methods$method.name[i])
if(dist.binary == TRUE) {
gut.d75.dist <- phyloseq::distance(physeq=gut.d75.physeq,
method=dist.method,
binary=dist.binary)
gut.d75.ord <- phyloseq::ordinate(physeq=gut.d75.physeq,
method="NMDS",
distance=dist.method,
binary=dist.binary,
trymax=99)
} else {
gut.d75.dist <- phyloseq::distance(gut.d75.physeq,
method=dist.method)
if(grepl("unifrac", dist.method)==TRUE) {
gut.d75.ord <- phyloseq::ordinate(gut.d75.physeq,
method="NMDS",
distance=dist.method)
} else
gut.d75.ord <- phyloseq::ordinate(gut.d75.physeq,
method="NMDS",
distance=dist.method,
trymax=99)
}
gut.d75.ord.data <- plot_ordination(physeq=gut.d75.physeq,
ordination=gut.d75.ord,
justDF=TRUE)
gut.d75.ord.geoms <- ggplot(gut.d75.ord.data, aes(x=NMDS1, y=NMDS2)) +
geom_point(aes(shape=housing, color=host.gt), size=2) +
scale_shape_manual(name="Housing",
values=housing.shps,
labels=c("Isolated", "Cohoused")) +
scale_color_manual(name="Host genotype",
values=gt.cols,
labels=c("Wild type", expression(italic(paste("rag1"))^-{}))) +
plot.theme
ord.list[[i]] <- gut.d75.ord.geoms
ggsave(gut.d75.ord.geoms,
file=paste("Plots/gut_ord_", gsub(" ", "", dist.name), ".pdf", sep=""),
width=6, height=4)
if(do.adns==TRUE) {
gut.d75.adns <- adonis(gut.d75.dist ~ housing * host.gt,
data=gut.d75.ord.data,
permutations=9999)
save(gut.d75.adns, file=paste("Saved_objects/gut_adns_", gsub(" ", "", dist.name), sep=""))
} else {
load(paste("Saved_objects/gut_adns_", gsub(" ", "", dist.name), sep=""))
}
gut.d75.adns.stats <- summary(permustats(gut.d75.adns))
gut.d75.adns.ses <- merge(gut.d75.adns$aov.tab, gut.d75.adns.stats$z, by=0, sort=FALSE, all=TRUE)
gut.d75.adns.ses.tbl <- data.frame("Df"=gut.d75.adns.ses$Df,
"R2"=gut.d75.adns.ses$R2,
"p"=gut.d75.adns.ses$`Pr(>F)`,
"SES"=gut.d75.adns.ses$y,
row.names=mgsub(c("housing", "host.gt"),
c("Housing", "Host Genotype"),
gut.d75.adns.ses$Row.names))
print(xtable(gut.d75.adns.ses.tbl),
floating=FALSE,
file=paste("XTables/d75_gut_ord_adns_",
mgsub(c(" ", "ø"), c("", "o"), dist.name),
".tex",
sep=""))
}
ord.list[[1]]
?highlight
install.packages("highlight")
library(highlight)
?highlight
setwd("~/Desktop/")
library(ggplot2)
rfus <- read.csv("c3_2_3.5.16_results -  Quantification Amplification Results_SYBR.csv", header=TRUE)
View(rfus)
ggplot(data=rfus, aes(x=Cycle, y=A1)) + geom_point()
ggplot(data=rfus, aes(x=Cycle, y=A2)) + geom_point()
ggplot(data=rfus, aes(x=Cycle, y=A3)) + geom_point()
ggplot(data=rfus, aes(x=Cycle, y=A4)) + geom_point()
ggplot(data=rfus, aes(x=Cycle, y=A5)) + geom_point()
ggplot(data=rfus, aes(x=Cycle, y=A6)) + geom_point()
?write.table
workdir <- "~/Desktop/"
setwd(workdir)
all.file <- "ellie_july_feeding_expt1_linregOutput.txt"
library(doBy)
library(ggplot2)
theme_set(theme_bw())
source("~/Code/R_scripts/generate_label_df.R")
all.full <- read.table(all.file, header=TRUE, sep="\t")
View(all.full)
TRUE == "true"
object == NULL
object  <- c()
object == NULL
class(all.full$target)
all.full$target
target.reps <- subset(all.full, target == "sIgM")
target.reps$target
target.reps <- droplevels(subset(all.full, target == "sIgM"))
target.reps$target
1 == 2
2 == 2
color <- c("red", "blue", "green")
"yellow" %in% color
"green" %in% color
"gre" %in% color
grepl("gre", color)
c(1:10)
x <- c(1:10)
y <- c(2:12)
plot(y ~ x)
y <- c(2:11)
plot(y~ x)
plot(x ~ y)
all.full
all.full$name
all.full[c(1:2),]
all.full[c(1:2),c("name", "target")]
library(vegan)
?specaccum
update.packages(ask=F)
update.packages(ask=F)
update.packages()
upgrade.packages()
update.packages()
install.packages("rgdal")
library(ggplot2)
?ggsave
print("hello")
print("hello")
cars
ggplot(cars, aes(x=speed, y=dist)) + geom_point()
library(ggplot1)
library(ggplot2)
ggplot(cars, aes(x=speed, y=dist)) + geom_point()
cars.lm <- lm(dist ~ speed, data=cars)
summary(cars.lm)
source(file.choose())
setwd("~/Google Drive/Code/R_scripts/Pretty_R-model_LaTeX_tables/")
xtable.summary(model.obj=cars.lm, file.id="cars", alt.factor.names="Speed")
lm.obj <- cars.lm
lm.xtbl <- xtable(lm.obj)
sum.lm <- summary(lm.obj)
row.names(lm.xtbl)
grepl("Intercept", alt.factor.names)
alt.factor.names="Speed"
grepl("Intercept", alt.factor.names)
alt.factor.names=c("(Intercept)", "Speed")
grepl("Intercept", alt.factor.names)
"(Intercept)" %in% alt.factor.names
source(file.choose()) # choose xtable_summary.R
cars.lm <- lm(dist ~ speed, data=cars)
xtable.summary(model.obj=cars.lm, file.id="cars", alt.factor.names=c("(Intercept)", "Speed"))
xtable.summary(model.obj=cars.lm, file.id="cars", alt.factor.names=c("Speed"))
source(file.choose()) # choose xtable_summary.R
cars.lm <- lm(dist ~ speed, data=cars)
xtable.summary(model.obj=cars.lm, file.id="cars", alt.factor.names=c("Speed"))
ggplot(cars, aes(x=speed, y=dist)) + geom_point() + stat_smooth(method="lm")
ggplot(cars, aes(x=speed, y=dist)) + geom_point() + stat_smooth(method="lm") + labs(x="Speed", y="Distance")
getwd()
getwd()
source("xtable_summary.R")
library(knitr)
knit2pdf("example.Rmd")
knit2pdf("example.Rmd")
